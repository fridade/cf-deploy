name: Cloudflare Workers Deployment

# Trigger the workflow on pushes to the main, develop branches, and pull request events
on:
  push:
    branches:
      - main     # Production branch
      - develop  # Staging branch
  pull_request:
    types: [opened, synchronize, reopened, closed] # Trigger on various PR events

jobs:
  # Deploy for staging and production
  deploy-staging-prod:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Only run this job for branch pushes

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '18'

      # Determine the branch and environment
      - name: Determine Environment
        id: env
        run: |
          if [ "${GITHUB_REF##*/}" == "develop" ]; then
            echo "::set-output name=environment::staging"
          elif [ "${GITHUB_REF##*/}" == "main" ]; then
            echo "::set-output name=environment::production"
          fi

      # Deploy to the correct environment
      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npm install -g wrangler
          wrangler deploy --env ${{ steps.env.outputs.environment }} # Deploy based on the branch (staging or production)


  delete-workers:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List and delete all workers
        env:
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          # Step 1: List all workers
          WORKERS_LIST=$(curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/workers/scripts" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.result[].id')
          
          # Step 2: Loop through each worker and delete it
          for WORKER in $WORKERS_LIST; do
            echo "Deleting worker: $WORKER"
            curl -X DELETE "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/workers/scripts/$WORKER" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              -H "Content-Type: application/json"
          done

  # Job for deploying the PR environment
  deploy-pr-env:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '18' # Use a recent stable Node.js version

      # Extract Short SHA1 for subdomain
      - name: Extract Commit SHA
        id: vars
        run: echo "::set-output name=short_sha::$(git rev-parse --short $GITHUB_SHA)"
      
      # Deploy all Cloudflare Workers related to the project
      - name: Deploy Cloudflare Workers to Temporary Subdomain
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npm install -g wrangler
          wrangler deploy --name nodematiclabs-${{ steps.vars.outputs.short_sha }} --env staging # Deploy using the commit SHA

      # Deploy the showcase project to a separate subdomain
      - name: Deploy Showcase Project
        run: |
          echo "Showcase project deployed at showcase-${{ steps.vars.outputs.short_sha }}.fritzdamiend.workers.dev"

  # Job for cleaning up the PR environment upon merging/deleting
  cleanup-pr-env:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '18'

      # Extract Short SHA1 for subdomain
      - name: Extract Commit SHA
        id: vars
        run: echo "::set-output name=short_sha::$(git rev-parse --short $GITHUB_SHA)"

      # Delete Cloudflare Worker
      - name: Delete Cloudflare Workers Environment
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npm install -g wrangler
          wrangler delete nodematiclabs-${{ steps.vars.outputs.short_sha }} --yes # Use --yes to confirm deletion

      # Clean up the showcase project resources
      - name: Cleanup Showcase Project
        run: |
          echo "Cleaning up showcase project for subdomain showcase-${{ steps.vars.outputs.short_sha }}.fritzdamiend.workers.dev"
